{"version":3,"file":"accordion.stories-74ce2a9f.js","sources":["../../../node_modules/uuid/lib/rng-browser.js","../../../node_modules/uuid/lib/bytesToUuid.js","../../../node_modules/uuid/v1.js","../../../node_modules/uuid/v4.js","../../../node_modules/uuid/index.js"],"sourcesContent":["// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]]\n  ]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\nvar _clockseq;\n\n// Previous uuid creation time\nvar _lastMSecs = 0;\nvar _lastNSecs = 0;\n\n// See https://github.com/uuidjs/uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n  var node = options.node || _nodeId;\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n  if (node == null || clockseq == null) {\n    var seedBytes = rng();\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [\n        seedBytes[0] | 0x01,\n        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]\n      ];\n    }\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  }\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","var v1 = require('./v1');\nvar v4 = require('./v4');\n\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\n\nmodule.exports = uuid;\n"],"names":["getRandomValues","rnds8","rngBrowserModule","rnds","i","r","byteToHex","bytesToUuid","buf","offset","bth","bytesToUuid_1","rng","require$$0","require$$1","_nodeId","_clockseq","_lastMSecs","_lastNSecs","v1","options","b","node","clockseq","seedBytes","msecs","nsecs","dt","tl","tmh","n","v1_1","v4","ii","v4_1","uuid","uuid_1"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}